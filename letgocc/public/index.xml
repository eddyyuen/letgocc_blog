<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>letgo.cc</title>
    <link>https://letgo.cc/</link>
    <description>Recent content on letgo.cc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>eddy@letgo.cc (eddy)</managingEditor>
    <webMaster>eddy@letgo.cc (eddy)</webMaster>
    <copyright>©2022, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 18 Feb 2022 10:32:43 +0800</lastBuildDate>
    
        <atom:link href="https://letgo.cc/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Faster Time Parse</title>
        <link>https://letgo.cc/posts/go/2022-02-16-faster-time-parse/</link>
        <pubDate>Fri, 18 Feb 2022 10:32:43 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Fri, 18 Feb 2022 10:32:43 +0800</atom:modified>
        <guid>https://letgo.cc/posts/go/2022-02-16-faster-time-parse/</guid>
        <description>本文翻译自原文： Faster time parsing 作者： Phil Pearl 在Ravelin，我们有大量的数据，有大量的时间戳。大多数时间戳在 BigQuery 中被存储为字符串，而我们的大多数 Go 结构用 Go time.Time 类型表示时间。 我很遗憾地说出上述这些事实。我们确实有大量的数据。而且我们确实有很多时间戳。一段时间以来，我一直在围着一个结论打转，随着时间的推移，我确信我将会朝着这个结论落下。 朋友不会让朋友在数据库中用字符串表示时间。 无论如何，决定已经做出，我们被它们所困</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>2022 Plan</title>
        <link>https://letgo.cc/posts/2022-02-17-plan/</link>
        <pubDate>Thu, 17 Feb 2022 14:24:01 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Thu, 17 Feb 2022 14:24:01 +0800</atom:modified>
        <guid>https://letgo.cc/posts/2022-02-17-plan/</guid>
        <description>很好 啊啊 22 22.1</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>flag</category>
            
          
        
        
          
            
              <category>flags</category>
            
          
        
        
          
            
              <category>test</category>
            
          
        
      </item>
      
      <item>
        <title>C# 语句关键字（四）：checked, unchecked</title>
        <link>https://letgo.cc/posts/dotnet/keyword/checked_unchecked/</link>
        <pubDate>Sun, 28 Mar 2021 16:23:43 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Sun, 28 Mar 2021 16:23:43 +0800</atom:modified>
        <guid>https://letgo.cc/posts/dotnet/keyword/checked_unchecked/</guid>
        <description>语句类别 本期介绍 checked, unchecked, fixed, lock 关键字 类别 C#关键字 选择语句 if、else、switch、case 迭代语句 do、for、foreach、in、while 跳转语句 break、continue、default、goto、return、yield 异常处理语句 throw、try-catch、try-finally、try-catch-finally Checked 和 unchecked checked、unchecked fixed 语句 fixed lock 语句 lock checked checked 关键字</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>keyword</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
          
            
              <category>CSharp 关键字</category>
            
          
        
      </item>
      
      <item>
        <title>C# 语句关键字（三）：goto, yield</title>
        <link>https://letgo.cc/posts/dotnet/keyword/goto_yield/</link>
        <pubDate>Sun, 28 Mar 2021 16:22:51 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Sun, 28 Mar 2021 16:22:51 +0800</atom:modified>
        <guid>https://letgo.cc/posts/dotnet/keyword/goto_yield/</guid>
        <description>语句类别 本期介绍 goto, yield 关键字 类别 C#关键字 选择语句 if、else、switch、case 迭代语句 do、for、foreach、in、while 跳转语句 break、continue、default、goto、return、yield 异常处理语句 throw、try-catch、try-finally、try-catch-finally Checked 和 unchecked checked、unchecked fixed 语句 fixed lock 语句 lock goto 直接跳转到标</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>keyword</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
      </item>
      
      <item>
        <title>C# 语句关键字（二）：for, foreach in</title>
        <link>https://letgo.cc/posts/dotnet/keyword/for_foreach_in/</link>
        <pubDate>Sun, 28 Mar 2021 16:21:19 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Sun, 28 Mar 2021 16:21:19 +0800</atom:modified>
        <guid>https://letgo.cc/posts/dotnet/keyword/for_foreach_in/</guid>
        <description>语句类别 本期介绍 for、foreach、in 关键字 类别 C#关键字 选择语句 if、else、switch、case 迭代语句 do、for、foreach、in、while 跳转语句 break、continue、default、goto、return、yield 异常处理语句 throw、try-catch、try-finally、try-catch-finally Checked 和 unchecked checked、unchecked fixed 语句</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>keyword</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
      </item>
      
      <item>
        <title>C# 语句关键字（一）：switch</title>
        <link>https://letgo.cc/posts/dotnet/keyword/switch/</link>
        <pubDate>Sun, 28 Mar 2021 16:13:47 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Sun, 28 Mar 2021 16:13:47 +0800</atom:modified>
        <guid>https://letgo.cc/posts/dotnet/keyword/switch/</guid>
        <description>介绍 语句就是我们所说的程序指令。一般语句都是按照顺序执行的，除非遇到下表中介绍的关键字。 语句类别 类别 C#关键字 选择语句 if、else、switch、case 迭代语句 do、for、foreach、in、while 跳转语句 break、continue、default、goto、return、yield 异常处理语句 throw、try-catch、try-finally、try-catch-finally</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>dotnet</category>
            
          
            
              <category>keyword</category>
            
          
        
        
          
            
              <category>dotnet</category>
            
          
        
        
      </item>
      
      <item>
        <title>Go Modules</title>
        <link>https://letgo.cc/posts/go/2020-08-14-go-modules/</link>
        <pubDate>Fri, 14 Aug 2020 19:54:12 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Fri, 14 Aug 2020 19:54:12 +0800</atom:modified>
        <guid>https://letgo.cc/posts/go/2020-08-14-go-modules/</guid>
        <description>很久没有用 Go 写代码了。以前 Go 和 Python 的包管理是我最讨厌的事。 Go 总有很多包无法下载，需要科学上网，或者自己下载替换。Python 要想用好包管理就要装虚拟环境，麻烦！ 现在 Go Modules 出来了，配合 GOPROXY 简直神器！ 具体怎么用不写了，自行 Google 吧。 值得一提的是，我不是用 Goland 开发的嘛。众所周知的原因它过期了。于是我来这里看了看，又去公众号看了看，接着又发了个“?” 到后台，你猜发生了什么事？ 如果有什么不懂的，记住，百度知道。</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
              <category>gomodules</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>用 ONLYOFFICE 在线查看Word Excel PPT</title>
        <link>https://letgo.cc/posts/docker/2020-08-11-onlyoffice/</link>
        <pubDate>Tue, 11 Aug 2020 11:56:38 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Tue, 11 Aug 2020 11:56:38 +0800</atom:modified>
        <guid>https://letgo.cc/posts/docker/2020-08-11-onlyoffice/</guid>
        <description>项目需要在线浏览 Office 文件，以前用过 SharePoint ，现在有 Office Online Server 可以处理。但是OOS安装配置比较复杂且需要 Windows 的服务器，不合适。一番查找，最后发现 ONLYOFFICE 的功能就是我需要的，马上部署！ 为了方便，就采用Docker镜像部署的方式 创建容器 首先我们必须安装有Docker（假设Docker宿主机IP：192.168.1.2），然后进入网页 Docker安装帮助文档，创建容器： 1 sudo docker run -i -t -d -p 9080:80 --restart=always onlyoffice/documentserver 在生产环境，数据不要存储在容器内，</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>onlyoffice</category>
            
          
            
              <category>office</category>
            
          
            
              <category>docker</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Windows 10 安装 WSL2</title>
        <link>https://letgo.cc/posts/windows/2020-08-30-install-wsl/</link>
        <pubDate>Mon, 03 Aug 2020 16:51:40 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Mon, 03 Aug 2020 16:51:40 +0800</atom:modified>
        <guid>https://letgo.cc/posts/windows/2020-08-30-install-wsl/</guid>
        <description>前言 有一些服务想要部署，但是没有那么多的测试环境。用 VirtualBox 的话占用的资源也不少。想起之前看过 WSL 的介绍，说启动一个Linux只需要几十M的内存！话不多说，搞起！ 启用 WSL 以管理员身份打开 PowerShell ： 1 2 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 更新到 WSL 2（可选） 升级 Windows Windows 10 Version 2004 以上的版本才能安装 WSL 2。可以运行 winver 查看自己的版本。 下载 更新工具 进行更新 启用“虚拟机平台”可选组件 1 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 升级 WSL2 Linux 内核 要使用 WSL 2 必须先下载 WSL 2 Linux 内核更新包安装即可。官方</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>WSL2</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>使用 Hugo 建立博客</title>
        <link>https://letgo.cc/posts/go/blog/2020-07-30-hugo-install/</link>
        <pubDate>Thu, 30 Jul 2020 15:59:34 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Thu, 30 Jul 2020 15:59:34 +0800</atom:modified>
        <guid>https://letgo.cc/posts/go/blog/2020-07-30-hugo-install/</guid>
        <description>想要备份一些技术文章和资料，很多博客都是php或要求数据库，找了一圈发现 Hugo 不错，单一文件，还是 golang 写的。 具体怎么使用搜索一下一大堆，这里写一下别的。 修改 Themes 后怎么编译 修改了别人的 scss 文件的话需要下载 extended 版本的hugo才能正常编译。只是修改HTML的话就不用。 显示行号、代码高亮 lineos 代表显示行号。 hl_line 代表代码里需要高亮的行，[2,3,5-7]表示第2、3、5至7 行都高亮。 linenostart 表示行号从199开始，这里的行号跟高亮的</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>blog</category>
            
          
            
              <category>hugo</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>又又又立 Flag 了</title>
        <link>https://letgo.cc/posts/2020-07-30-flag-again/</link>
        <pubDate>Thu, 30 Jul 2020 15:33:16 +0800</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Thu, 30 Jul 2020 15:33:16 +0800</atom:modified>
        <guid>https://letgo.cc/posts/2020-07-30-flag-again/</guid>
        <description>又又又立 flag 了！ 每次有新的东东出来的时候，就会立 flag ，这次也不例外。 年底前要达成的目标 体重目前 80KG，目标 70KG； 公众号15篇原创文章； .NET Core 做一个集成各种常用功能的项目，开箱即用； 学弹钢琴，能完整弹奏任意一首曲目。 奖品 以上如果每有一条达不到，微信公众号就提供一份不少于￥200的奖品进行抽奖！ 立此为证！！</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
          
            
              <category>flag</category>
            
          
        
        
          
            
              <category>flags</category>
            
          
        
        
      </item>
      
      <item>
        <title>最新评论</title>
        <link>https://letgo.cc/comments/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        <author>eddy@letgo.cc (eddy)</author>
        <atom:modified>Thu, 28 Feb 2019 00:00:00 +0000</atom:modified>
        <guid>https://letgo.cc/comments/</guid>
        <description>阿阿嘎 啊发发</description>
        
        <dc:creator>eddy</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>
